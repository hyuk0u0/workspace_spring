package kr.co.ca;

public class GTest<T> {
	private T name;
	
	public GTest() {
		// TODO Auto-generated constructor stub
	}

	public GTest(T name) {
		super();
		this.name = name;
	}

	public T getName() {
		return name;
	}

	public void setName(T name) {
		this.name = name;
	}
	
	
	
}
==============================================================================
==============================================================================
package com.naver;

public class Apple {
	private String name;
	private int price;
	
	public Apple() {
		// TODO Auto-generated constructor stub
	}

	public Apple(String name, int price) {
		super();
		this.name = name;
		this.price = price;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + price;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Apple other = (Apple) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (price != other.price)
			return false;
		return true;
	}

	@Override
	public String toString() {
		return	name;
	}
	
	
}
==============================================================================
==============================================================================
package kr.co.ca;

public class Pear {
	private String name;
	private int price;
	
	public Pear() {
		// TODO Auto-generated constructor stub
	}

	public Pear(String name, int price) {
		super();
		this.name = name;
		this.price = price;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getPrice() {
		return price;
	}

	public void setPrice(int price) {
		this.price = price;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + price;
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Pear other = (Pear) obj;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (price != other.price)
			return false;
		return true;
	}
	
	
}
==============================================================================
==============================================================================
package com.naver;

import java.util.ArrayList;
import java.util.List;

import kr.co.ca.Apple;
import kr.co.ca.Pear;

public class Test1 {
	
	public void me1() {
		List<Integer> list = new ArrayList<Integer>();
	}
	
	public void me2() {
		List<Apple> list2 = new ArrayList<Apple>();
		list2.add(new Apple("사과1", 3000));
		list2.add(new Apple("사과2", 3500));
		list2.add(new Apple("사과3", 2000));
		list2.add(new Apple("사과1", 3000));
		list2.add(new Apple("사과2", 1000));
		
		for (int i = list2.size() - 1; i >= 0; i--) {
			Apple aa = list2.get(i);
			System.out.println(aa.getName());
			System.out.println(aa.getPrice());
			
		}
		
		for (int i = 0; i < list2.size(); i++) {
			Apple a = list2.get(i);
			System.out.println(a.getName());
			System.out.println(a.getPrice());
		}
	}
	
	public List<String> me3(List<String> list3) {
		
		list3.add("hello");
		list3.add("world");
		list3.add("good");
		list3.add("morning");
		list3.add("!!!");
		
		for (int i = 0; i < list3.size(); i++) {
			String s = list3.get(i);
			System.out.println(s);
		}
		
		
		return list3;
	}
	
	public void me4() {
		List<Integer> list4 = new ArrayList<Integer>();
		
		list4.add(new Integer(1));
		list4.add(1);
		list4.add(2);
		list4.add(3);
		list4.add(5);
		list4.add(8);
		list4.add(11);
		
		for (int i = 0; i < list4.size(); i++) {
			int a = list4.get(i);
			System.out.println(a);
		}
		
	}
	
	public void me5() {
		List<Apple> list5 = new ArrayList<Apple>();
		
		Apple a1 = new Apple("부사", 2000);
		Apple a2 = new Apple("부사", 2500);
		Apple a3 = new Apple("알사과", 1000);
		
		list5.add(a1);
		list5.add(a2);
		list5.add(a3);
		list5.add(new Apple("부사", 3000));
		list5.add(new Apple("홍옥", 1000));
		
		for(int i = 0; i < list5.size(); i++) {
			Apple a = list5.get(i);
			System.out.println(a.getName());
			System.out.println(a.getPrice());
		}
		
		
	}
	
	public void me6() {
		List<Pear> list6 = new ArrayList<Pear>();
		
		list6.add(new Pear("배1", 3000));
		list6.add(new Pear("배2", 3500));
		list6.add(new Pear("배3", 2000));
		list6.add(new Pear("배1", 3000));
		list6.add(new Pear("배2", 1000));
		
		Pear p2 = list6.get(2);
		System.out.println(p2.getName());
		System.out.println(p2.getPrice());
		
		for (int i = 0; i < list6.size(); i++) {
			Pear p3 = list6.get(i);
			System.out.println(p3.getName());
			System.out.println(p3.getPrice());
		}
	}
	
	public void me7() {
		List<Integer> list7 = new ArrayList<Integer>();
		
		for(int i = 0; i < 10; i++) {
			list7.add(i*2);
			
		}
		
		list7.set(0, 1);
		
		for(int i = list7.size() - 1; i >= 0; i--) {
			System.out.println(list7.get(i));
		}
	}
	
	public void me8() {
		List<Apple> list8 = new ArrayList<Apple>();
		
		list8.add(new Apple("부사", 1000));
		list8.add(new Apple("부사", 2000));
		list8.add(new Apple("홍옥", 3000));
		list8.add(new Apple("부사", 1000));
		
		int idx = list8.indexOf(new Apple("홍옥", 500));
		System.out.println(idx);
		
		idx = list8.indexOf(new Apple("부사", 1000));
		System.out.println(idx);
		
	}
	
	public void me9() {
		List<Long> list9 = new ArrayList<Long>();
		list9.add(1L);
		list9.add(34L);
		list9.add(11L);
		list9.add(44L);
		
		for(int i = 0; i < list9.size(); i++) {
			long l = list9.get(i);
			System.out.println(l);
		}
		
		boolean b = list9.contains(34L);
		System.out.println(b);
	}
	
	public void me10 () {
		List<Integer> list10 = new ArrayList<Integer>();
		for(int i = 0; i < 5; i++) {
			list10.add(i * 21);
		}
		
		for(int i = list10.size() - 1; i >= 0; i--) {
			System.out.println(list10.get(i));
		}
		
		System.out.println(list10);
		list10.remove(3);
		System.out.println(list10);
		list10.remove(1);
		System.out.println(list10);
		// 뒤에서부터 삭제
		
		
	}
	
	public void me11() {
		List<Integer> list11 = new ArrayList<Integer>();
		for(int i = 0; i < 10000; i++) {
			list11.add(i);
		}
		
		System.out.println(list11);
		list11.clear();
	}
	
}
=================================================================================
=================================================================================
package kr.co.ca;

import java.util.ArrayList;
import java.util.List;

import com.naver.Test1;

public class MainEx {
	public static void main(String[] args) {
		List<StringBuffer> list = new ArrayList<StringBuffer>();
		List<Apple> appleBox = new ArrayList<Apple>();
		List<Pear> pearBox = new ArrayList<Pear>();
		
		GTest<Long> gt1 = new GTest<Long>();
		GTest<Boolean> gt2 = new GTest<Boolean>();
		GTest<Byte> gt3 = new GTest<Byte>();
		GTest<Short> gt4 = new GTest<Short>();
		GTest<Float> gt5 = new GTest<Float>();
		GTest<Double> gt6 = new GTest<Double>();
		GTest<Character> gt7 = new GTest<Character>();
		GTest<Integer> gt8 = new GTest<Integer>();
		
		int a = new Integer(4);
		
		Integer b = 5;
		System.out.println(a);
		
		
		String str = "55";
		int c = 55;
		
		System.out.println(str);
		System.out.println(c);
		System.out.println(str + c);
		
		int s = Integer.parseInt(str);
		System.out.println(s + c);
		
		String str2 = "C";
//		char d = Character.parseChar(str2);  안됨
		char d = str2.charAt(0);
		
		s = Integer.valueOf(str);
		
		long l = Long.valueOf(str);
		System.out.println(str);
		
		Test1 t1 = new Test1();
		t1.me6();
		
		t1.me5();
		t1.me4();
		
		List<String> list3 = new ArrayList<String>();
		t1.me3(list3);
		
		System.out.println();
		t1.me2();
		System.out.println();
		t1.me7();
		
		t1.me8();
		t1.me9();
		t1.me10();
		
		
		
		
		
		
		
		
		
		
		
		
	}
}
=================================================================================
4
55
55
5555
110
55
배3
2000
배1
3000
배2
3500
배3
2000
배1
3000
배2
1000
부사
2000
부사
2500
알사과
1000
부사
3000
홍옥
1000
1
1
2
3
5
8
11
hello
world
good
morning
!!!

사과2
1000
사과1
3000
사과3
2000
사과2
3500
사과1
3000
사과1
3000
사과2
3500
사과3
2000
사과1
3000
사과2
1000

18
16
14
12
10
8
6
4
2
1
-1
0
1
34
11
44
true
84
63
42
21
0
[0, 21, 42, 63, 84]
[0, 21, 42, 84]
[0, 42, 84]

=================================================================================
package com.naver;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.omg.CORBA.SetOverrideType;

public class Test1 {
	
	public void me1() {
		Map<String, String> map1 = new HashMap<String, String>();
		
	}
	
	public void me2() {
		Map<Pear, Apple> map2 = new HashMap<Pear, Apple>();
	}
	
	public void me3() {
		Map<Integer, String> map3 = new HashMap<Integer, String>();
		map3.put(1, "hello");
		map3.put(101, "hello");
		map3.put(1, "world");
		map3.put(2, "!!!!");
		
		System.out.println(map3);
		
		Set<Integer> set = map3.keySet();
		Iterator<Integer> it = set.iterator();
		while (it.hasNext()) {
			Integer key = it.next();
			String value = map3.get(key);
			System.out.println(value);
			
		}
	}
	
	public void me4() {
		Map<String, Integer> map4 = new HashMap<String, Integer>();
		map4.put("hello", 1);
		map4.put("world", 2);
		map4.put("good", 3);
		map4.put("morning", 4);
		
		int a = map4.get("hello");
		System.out.println(a);
		
		Set<String> set = map4.keySet();
		Iterator<String> it = set.iterator();
		while (it.hasNext()) {
			String key = it.next();
			int value = map4.get(key);
			System.out.println(value);
			
		}
	}
	
	public void me5() {
		Map<String, Apple> map5 = new HashMap<String, Apple>();
		
		map5.put("부산", new Apple("부사", 2000));
		map5.put("대구", new Apple("홍옥", 3000));
		map5.put("대전", new Apple("왕사과", 4000));
		map5.put("서울", new Apple("부사", 1000));
		
		Set<String> set = map5.keySet();
		Iterator<String> it = set.iterator();
		
		
		while (it.hasNext()) {
			String key = it.next();
			Apple value = map5.get(key);
			System.out.println(value.getName());
			System.out.println(value.getPrice());
			
		}
	}
	
	
	
	
	
}
=================================================================================
=================================================================================
package kr.co.ca;

import java.util.ArrayList;
import java.util.List;

import com.naver.Pear;
import com.naver.Test1;

public class MainEx {
	public static void main(String[] args) {
		Test1 t1 = new Test1();
		
		Pear p = new Pear();
		t1.me1(50);
		t1.me2(p);
		
		List<Integer> list = new ArrayList<Integer>();
		t1.me3(list);
		
		t1.me4();
	}
}
=================================================================================
5
[0, 1, 3, 4, 5]
0
1
3
4
5
4
[world, hello, good, morning]
world
hello
good
morning
::::::::
[world, hello, good, morning]
::::::::
4
[사과3, 사과2, 사과1, 사과2]
사과3
2000
사과2
3500
사과1
3000
사과2
1000
[1, 101, 121, 11, 14, 111]
[1, 101, 121, 11, 111]
[]

=================================================================================
=================================================================================
package com.naver;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import org.omg.CORBA.SetOverrideType;

public class Test1 {
	
	public void me1() {
		Map<String, String> map1 = new HashMap<String, String>();
		
	}
	
	public void me2() {
		Map<Pear, Apple> map2 = new HashMap<Pear, Apple>();
	}
	
	public void me3() {
		Map<Integer, String> map3 = new HashMap<Integer, String>();
		map3.put(1, "hello");
		map3.put(101, "hello");
		map3.put(1, "world");
		map3.put(2, "!!!!");
		
		System.out.println(map3);
		
		Set<Integer> set = map3.keySet();
		Iterator<Integer> it = set.iterator();
		while (it.hasNext()) {
			Integer key = it.next();
			String value = map3.get(key);
			System.out.println(value);
			
		}
	}
	
	public void me4() {
		Map<String, Integer> map4 = new HashMap<String, Integer>();
		map4.put("hello", 1);
		map4.put("world", 2);
		map4.put("good", 3);
		map4.put("morning", 4);
		
		int a = map4.get("hello");
		System.out.println(a);
		
		Set<String> set = map4.keySet();
		Iterator<String> it = set.iterator();
		while (it.hasNext()) {
			String key = it.next();
			int value = map4.get(key);
			System.out.println(value);
			
		}
	}
	
	public void me5() {
		Map<String, Apple> map5 = new HashMap<String, Apple>();
		
		map5.put("부산", new Apple("부사", 2000));
		map5.put("대구", new Apple("홍옥", 3000));
		map5.put("대전", new Apple("왕사과", 4000));
		map5.put("서울", new Apple("부사", 1000));
		
		Set<String> set = map5.keySet();
		Iterator<String> it = set.iterator();
		
		
		while (it.hasNext()) {
			String key = it.next();
			Apple value = map5.get(key);
			System.out.println(value.getName());
			System.out.println(value.getPrice());
			
		}
	}
	
	
	
	
	
}
=================================================================================
{1=world, 2=!!!!, 101=hello}
world
!!!!
hello

1
2
1
3
4

왕사과
4000
부사
1000
부사
2000
홍옥
3000

=================================================================================